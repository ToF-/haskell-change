unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/ka6rabx4lz7m3habrjhh8hvbgxbz8r98-bash-5.2-p15/bin/bash'
CC='clang'
export CC
CONFIG_SHELL='/nix/store/ka6rabx4lz7m3habrjhh8hvbgxbz8r98-bash-5.2-p15/bin/bash'
export CONFIG_SHELL
CXX='clang++'
export CXX
HOSTTYPE='aarch64'
HOST_PATH='/nix/store/ay0icgbhay57540wh6yy12sh5ngwgzy9-ncurses-6.4/bin:/nix/store/lpv1rr58zr5xa2q60s1x4792pgb6w7fr-libiconv-50/bin:/nix/store/qr4zarpiaf3fk2bm01gnb33grg2nwwrh-coreutils-9.1/bin:/nix/store/qv0bh98mv75sc3359pk5z667i3s16chh-findutils-4.9.0/bin:/nix/store/55089ghacw49vjxlr0bz5mqpgah4g09f-diffutils-3.9/bin:/nix/store/26ry428qjd3bp5xs1dsfk9raq5pygslg-gnused-4.9/bin:/nix/store/zmfr0yl6sab6q9rkd0shrpviq0f4i7mi-gnugrep-3.7/bin:/nix/store/vxkmgaiq1yml2194zbcsnnxs2srpnvp2-gawk-5.2.1/bin:/nix/store/diqzyr14h3l33f9p6zvraff44xxy3mhj-gnutar-1.34/bin:/nix/store/5yi8kcslpwfpjm2ba2dd6mkknasskzyq-gzip-1.12/bin:/nix/store/ajs5mldbvz89lix5rmwbnn4hm0mzp470-bzip2-1.0.8-bin/bin:/nix/store/f79s7fix4w9y807cv6s1sw4d46vy9ah8-gnumake-4.4.1/bin:/nix/store/ka6rabx4lz7m3habrjhh8hvbgxbz8r98-bash-5.2-p15/bin:/nix/store/xahr84kvrr6k30p5m4v3gjw17qxszfjk-patch-2.7.6/bin:/nix/store/idx107jx7andx62flgjm41hdkkbif35m-xz-5.4.1-bin/bin:/nix/store/s19fskgc2j241kmv1rw203nk0cki3dh6-file-5.44/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LD_DYLD_PATH='/usr/lib/dyld'
export LD_DYLD_PATH
LINENO='76'
MACHTYPE='aarch64-apple-darwin22.3.0'
MACOSX_DEPLOYMENT_TARGET='11.0'
export MACOSX_DEPLOYMENT_TARGET
NIX_BINTOOLS='/nix/store/v3ks390idh1xqnh3r0zlkqc86pcy7lva-cctools-binutils-darwin-wrapper-973.0.1'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_aarch64_apple_darwin='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_aarch64_apple_darwin
NIX_BUILD_CORES='10'
export NIX_BUILD_CORES
NIX_CC='/nix/store/cy78am69kj3d2r286rd7wg0cv48gqa3z-clang-wrapper-11.1.0'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_aarch64_apple_darwin='1'
export NIX_CC_WRAPPER_TARGET_HOST_aarch64_apple_darwin
NIX_CFLAGS_COMPILE=' -frandom-seed=4g6xcdj1lr -isystem /nix/store/lpv1rr58zr5xa2q60s1x4792pgb6w7fr-libiconv-50/include -isystem /nix/store/1wamlhkl3q15b7pdim85vqkmz053fwlg-libcxx-11.1.0-dev/include -isystem /nix/store/21knak232h33cha4a16k6gzgai23c0ss-libcxxabi-11.1.0-dev/include -isystem /nix/store/h2hd63vq9js32ggqx9nvhsjqx4b2ckss-compiler-rt-libc-11.1.0-dev/include -iframework /nix/store/21fn46279sjpqqqqsy2cnkxr3rqzbwq6-apple-framework-CoreFoundation-11.0.0/Library/Frameworks -isystem /nix/store/3pd5fbv4did9ya9mjbcj25rfmdk021sm-libobjc-11.0.0/include -isystem /nix/store/lpv1rr58zr5xa2q60s1x4792pgb6w7fr-libiconv-50/include -isystem /nix/store/1wamlhkl3q15b7pdim85vqkmz053fwlg-libcxx-11.1.0-dev/include -isystem /nix/store/21knak232h33cha4a16k6gzgai23c0ss-libcxxabi-11.1.0-dev/include -isystem /nix/store/h2hd63vq9js32ggqx9nvhsjqx4b2ckss-compiler-rt-libc-11.1.0-dev/include -iframework /nix/store/21fn46279sjpqqqqsy2cnkxr3rqzbwq6-apple-framework-CoreFoundation-11.0.0/Library/Frameworks -isystem /nix/store/3pd5fbv4did9ya9mjbcj25rfmdk021sm-libobjc-11.0.0/include'
export NIX_CFLAGS_COMPILE
NIX_COREFOUNDATION_RPATH='/nix/store/21fn46279sjpqqqqsy2cnkxr3rqzbwq6-apple-framework-CoreFoundation-11.0.0/Library/Frameworks'
export NIX_COREFOUNDATION_RPATH
NIX_DONT_SET_RPATH='1'
export NIX_DONT_SET_RPATH
NIX_DONT_SET_RPATH_FOR_BUILD='1'
export NIX_DONT_SET_RPATH_FOR_BUILD
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='fortify stackprotector pic strictoverflow format relro bindnow'
export NIX_HARDENING_ENABLE
NIX_IGNORE_LD_THROUGH_GCC='1'
export NIX_IGNORE_LD_THROUGH_GCC
NIX_LDFLAGS=' -liconv -L/nix/store/ay0icgbhay57540wh6yy12sh5ngwgzy9-ncurses-6.4/lib -L/nix/store/xc88ky1w798ncij3jr12gqcv2w9njyy2-libffi-3.4.4/lib -L/nix/store/s8ddra36d0p31gxbg5qfahdnd0hy58ca-gmp-with-cxx-6.2.1/lib -L/nix/store/lpv1rr58zr5xa2q60s1x4792pgb6w7fr-libiconv-50/lib -L/nix/store/y56hqp2dgrh9hi9xyd88n0pcl6gn895d-libcxx-11.1.0/lib -L/nix/store/gs6iqzg3cswfsxwnwcvsnf6fn76wpbr2-libcxxabi-11.1.0/lib -L/nix/store/81jnzlpii91vz9y8rwb7g095zk2jj2qr-compiler-rt-libc-11.1.0/lib -L/nix/store/3pd5fbv4did9ya9mjbcj25rfmdk021sm-libobjc-11.0.0/lib -L/nix/store/ay0icgbhay57540wh6yy12sh5ngwgzy9-ncurses-6.4/lib -L/nix/store/xc88ky1w798ncij3jr12gqcv2w9njyy2-libffi-3.4.4/lib -L/nix/store/s8ddra36d0p31gxbg5qfahdnd0hy58ca-gmp-with-cxx-6.2.1/lib -L/nix/store/lpv1rr58zr5xa2q60s1x4792pgb6w7fr-libiconv-50/lib -L/nix/store/y56hqp2dgrh9hi9xyd88n0pcl6gn895d-libcxx-11.1.0/lib -L/nix/store/gs6iqzg3cswfsxwnwcvsnf6fn76wpbr2-libcxxabi-11.1.0/lib -L/nix/store/81jnzlpii91vz9y8rwb7g095zk2jj2qr-compiler-rt-libc-11.1.0/lib -L/nix/store/3pd5fbv4did9ya9mjbcj25rfmdk021sm-libobjc-11.0.0/lib'
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
export NIX_NO_SELF_RPATH
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='darwin22.3.0'
PATH='/nix/store/y3fkajid8l1g2zlz1b7jlz3489d5z045-ghc-9.2.7-with-packages/bin:/nix/store/nspwwl1r7rs67acx9acfqi2xln32a9ll-haskell-language-server-1.10.0.0/bin:/nix/store/4x58016hafv8rq6mppwjcw7klj2gmwkk-aeson-pretty-0.8.9/bin:/nix/store/6qar0lw8c0dhmsgmzh86az9zpicbh6fi-ghc-9.2.7/bin:/nix/store/mw1nwjk1317jrnrgpbb0sdv731kc4iwx-ghcide-1.10.0.0/bin:/nix/store/qfxdkvv2naq7llwkx60vp9i7a39sdb28-constraints-extras-0.3.2.1/bin:/nix/store/20cnjfbackyxn27czjs4lnaf2qpdf3js-hie-bios-0.12.0/bin:/nix/store/mvi0dbg41dswqh0nfzy4iyhgcpg0icg0-hiedb-0.4.3.0/bin:/nix/store/aphr74x364f8fznyb3877sdd0n6nswam-implicit-hie-0.1.2.7/bin:/nix/store/g3iqr99mdxx0da0xm88dzjzbv7wxwzyk-pretty-simple-4.1.2.0/bin:/nix/store/dldligcgvikrz4m3vijvzmkg7r7z53cn-floskell-0.10.7/bin:/nix/store/cmwa8c9bbf3aija4b4hr2q475q2qzmpn-fourmolu-0.9.0.0/bin:/nix/store/0c84dpaaipiagswc4gy047c39c6rk40r-retrie-1.2.2/bin:/nix/store/l4s1dkx57wlb7w5cnf623wag2f50zp8m-apply-refact-0.11.0.0/bin:/nix/store/956azca84xrdg8fwmly5n9m2g55mb3hs-hlint-3.4.1/bin:/nix/store/5iqly9ds4vdgpxz7nqhpys91vh642qga-cpphs-1.20.9.1/bin:/nix/store/labcmmi09g1769rpiiwcim6k4rmc2p5d-hscolour-1.24.4/bin:/nix/store/1ww92x8wj0rcm04j2had4cjz0731vgma-ormolu-0.5.0.1-bin/bin:/nix/store/p9vgkrng4n3m0gd43r0nva9bn10jg9ad-stylish-haskell-0.14.3.0/bin:/nix/store/cy78am69kj3d2r286rd7wg0cv48gqa3z-clang-wrapper-11.1.0/bin:/nix/store/nyrn55869kmx1bn1rx4mhk18irypbh1r-clang-11.1.0/bin:/nix/store/qr4zarpiaf3fk2bm01gnb33grg2nwwrh-coreutils-9.1/bin:/nix/store/v3ks390idh1xqnh3r0zlkqc86pcy7lva-cctools-binutils-darwin-wrapper-973.0.1/bin:/nix/store/nq3fp1bjaizwxv6j7gqnza6s8sdiamm8-cctools-binutils-darwin-973.0.1/bin:/nix/store/ay0icgbhay57540wh6yy12sh5ngwgzy9-ncurses-6.4/bin:/nix/store/lpv1rr58zr5xa2q60s1x4792pgb6w7fr-libiconv-50/bin:/nix/store/qr4zarpiaf3fk2bm01gnb33grg2nwwrh-coreutils-9.1/bin:/nix/store/qv0bh98mv75sc3359pk5z667i3s16chh-findutils-4.9.0/bin:/nix/store/55089ghacw49vjxlr0bz5mqpgah4g09f-diffutils-3.9/bin:/nix/store/26ry428qjd3bp5xs1dsfk9raq5pygslg-gnused-4.9/bin:/nix/store/zmfr0yl6sab6q9rkd0shrpviq0f4i7mi-gnugrep-3.7/bin:/nix/store/vxkmgaiq1yml2194zbcsnnxs2srpnvp2-gawk-5.2.1/bin:/nix/store/diqzyr14h3l33f9p6zvraff44xxy3mhj-gnutar-1.34/bin:/nix/store/5yi8kcslpwfpjm2ba2dd6mkknasskzyq-gzip-1.12/bin:/nix/store/ajs5mldbvz89lix5rmwbnn4hm0mzp470-bzip2-1.0.8-bin/bin:/nix/store/f79s7fix4w9y807cv6s1sw4d46vy9ah8-gnumake-4.4.1/bin:/nix/store/ka6rabx4lz7m3habrjhh8hvbgxbz8r98-bash-5.2-p15/bin:/nix/store/xahr84kvrr6k30p5m4v3gjw17qxszfjk-patch-2.7.6/bin:/nix/store/idx107jx7andx62flgjm41hdkkbif35m-xz-5.4.1-bin/bin:/nix/store/s19fskgc2j241kmv1rw203nk0cki3dh6-file-5.44/bin'
export PATH
PATH_LOCALE='/nix/store/vqa7bnaf9s2abd4bjmvygrgvkp6faav3-adv_cmds-119-locale/share/locale'
export PATH_LOCALE
PS4='+ '
RANLIB='ranlib'
export RANLIB
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/y3fkajid8l1g2zlz1b7jlz3489d5z045-ghc-9.2.7-with-packages/share:/nix/store/9v8n3drgavpimydds6iq35kn21bfd2d4-attoparsec-0.14.4/share:/nix/store/6qar0lw8c0dhmsgmzh86az9zpicbh6fi-ghc-9.2.7/share:/nix/store/qlq648qg29c25j8fhnzr79lnj2nxvahp-fail-4.9.0.0/share:/nix/store/956azca84xrdg8fwmly5n9m2g55mb3hs-hlint-3.4.1/share:/nix/store/1ww92x8wj0rcm04j2had4cjz0731vgma-ormolu-0.5.0.1-bin/share'
export XDG_DATA_DIRS
__darwinAllowLocalNetworking=''
export __darwinAllowLocalNetworking
__impureHostDeps='/bin/sh /usr/lib/libSystem.B.dylib /usr/lib/system/libunc.dylib /dev/zero /dev/random /dev/urandom /bin/sh'
export __impureHostDeps
__propagatedImpureHostDeps=''
export __propagatedImpureHostDeps
__propagatedSandboxProfile=''
export __propagatedSandboxProfile
__sandboxProfile=''
export __sandboxProfile
__structuredAttrs=''
export __structuredAttrs
buildInputs=''
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/ka6rabx4lz7m3habrjhh8hvbgxbz8r98-bash-5.2-p15/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs='/nix/store/21fn46279sjpqqqqsy2cnkxr3rqzbwq6-apple-framework-CoreFoundation-11.0.0'
defaultNativeBuildInputs='/nix/store/c7fdd6cjs0zj6w3sssv7srs2anw58j6s-update-autotools-gnu-config-scripts-hook /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/bxsly8a56yb8kyrq03s82a3vyc8fqrb3-multiple-outputs.sh /nix/store/nf1lkdrhapsx5lr6diyxyjr7pb7r20gr-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh /nix/store/d275wzmimzi3xp4j3vbkvxscmc79q088-strip.sh /nix/store/cy78am69kj3d2r286rd7wg0cv48gqa3z-clang-wrapper-11.1.0'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
initialPath='/nix/store/qr4zarpiaf3fk2bm01gnb33grg2nwwrh-coreutils-9.1 /nix/store/qv0bh98mv75sc3359pk5z667i3s16chh-findutils-4.9.0 /nix/store/55089ghacw49vjxlr0bz5mqpgah4g09f-diffutils-3.9 /nix/store/26ry428qjd3bp5xs1dsfk9raq5pygslg-gnused-4.9 /nix/store/zmfr0yl6sab6q9rkd0shrpviq0f4i7mi-gnugrep-3.7 /nix/store/vxkmgaiq1yml2194zbcsnnxs2srpnvp2-gawk-5.2.1 /nix/store/diqzyr14h3l33f9p6zvraff44xxy3mhj-gnutar-1.34 /nix/store/5yi8kcslpwfpjm2ba2dd6mkknasskzyq-gzip-1.12 /nix/store/ajs5mldbvz89lix5rmwbnn4hm0mzp470-bzip2-1.0.8-bin /nix/store/f79s7fix4w9y807cv6s1sw4d46vy9ah8-gnumake-4.4.1 /nix/store/ka6rabx4lz7m3habrjhh8hvbgxbz8r98-bash-5.2-p15 /nix/store/xahr84kvrr6k30p5m4v3gjw17qxszfjk-patch-2.7.6 /nix/store/idx107jx7andx62flgjm41hdkkbif35m-xz-5.4.1-bin /nix/store/s19fskgc2j241kmv1rw203nk0cki3dh6-file-5.44'
mesonFlags=''
export mesonFlags
name='nix-shell-env'
export name
nativeBuildInputs='/nix/store/y3fkajid8l1g2zlz1b7jlz3489d5z045-ghc-9.2.7-with-packages /nix/store/nspwwl1r7rs67acx9acfqi2xln32a9ll-haskell-language-server-1.10.0.0'
export nativeBuildInputs
out='/Users/christophethibaut/Coding/haskell-change/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/21fn46279sjpqqqqsy2cnkxr3rqzbwq6-apple-framework-CoreFoundation-11.0.0'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/y3fkajid8l1g2zlz1b7jlz3489d5z045-ghc-9.2.7-with-packages' '/nix/store/3n56n8mry6bwxqvi2pbh5hxs6c737wka-aeson-2.0.3.0' '/nix/store/9v8n3drgavpimydds6iq35kn21bfd2d4-attoparsec-0.14.4' '/nix/store/1wrb580pfjxbmck738f9x2j3bajbfj1b-scientific-0.3.7.0' '/nix/store/gf5zyxx2v0i7lnkrdh51q6ip1p2bk6dy-hashable-1.4.2.0' '/nix/store/fybnlimf6gn1cl5bi9d4anyj9f0wyq5x-data-array-byte-0.1.0.1' '/nix/store/r2ms1fyvmzf88wkd731lnz9qs353kh3d-integer-logarithms-1.0.3.1' '/nix/store/15xfgk7dvdbv8m6r728i3c9nay1l8g79-primitive-0.7.3.0' '/nix/store/dsghwdi1i9x53h2rflgkhwni91b39sxl-base-compat-batteries-0.12.2' '/nix/store/l4zjyhxzq0lwcgcg0qqkf1g4mq2q7mii-base-compat-0.12.2' '/nix/store/ljrv1h4fgfagbw10k24xpl5zsms0gj1i-data-fix-0.3.2' '/nix/store/ivs51wzwhqw97qgl0mlvmcziplcksjlc-dlist-1.0' '/nix/store/wiv01ydmb8qcqg27hd86gq76x5yd661d-indexed-traversable-0.1.2.1' '/nix/store/lj9apzjlly5szm7dm6qblkiwgmw5kn04-OneTuple-0.3.1' '/nix/store/s1mwq5g4zld5scy54fch461xq821a3pv-QuickCheck-2.14.2' '/nix/store/xid1qf0z5wjp9ynzr75zmlip6jg4vwyk-random-1.2.1.1' '/nix/store/rgzyn3q8f6v4zlny9jjaig6vq7g83nn0-splitmix-0.1.0.4' '/nix/store/rgzyn3q8f6v4zlny9jjaig6vq7g83nn0-splitmix-0.1.0.4' '/nix/store/nss5m88lxgaq8l42cj01597ny03cpfn9-semialign-1.2.0.1' '/nix/store/5wnh8ria8jvjyr7zm1w5yjn79paw3smh-indexed-traversable-instances-0.1.1.2' '/nix/store/mzrgn70srpsavkfqyvxzzkdc42q4rxhy-tagged-0.8.6.1' '/nix/store/9ndgiz0v0cag8vzji9ns0bcdb1ii1a8l-unordered-containers-0.2.19.1' '/nix/store/6n9x5pqj90pqqxc2ka393xj63zqvccpg-vector-0.12.3.1' '/nix/store/zb3px1gnmv4p84fc3hmsd3k4aybrq1z5-semigroupoids-5.3.7' '/nix/store/7djgxba2rgbrzqawplh8zbkb6bmv1jzm-base-orphans-0.8.8.2' '/nix/store/9wq03sy263raqjllv9plpr2lhnynbpcd-bifunctors-5.5.15' '/nix/store/klwpfni2qcn7lpg7svalrqv6nqlvcyai-comonad-5.0.8' '/nix/store/cwr0x2qnxl96ydjib2p32ngf4pg04aqq-distributive-0.6.2.1' '/nix/store/swdpzn5s67k0ppzymlsd7424v1z19dxd-transformers-compat-0.7.2' '/nix/store/g1sd8hb1538jcbcxriprwh2jwzic2cli-th-abstraction-0.4.5.0' '/nix/store/6dbnicpy353vhd7s61f0mxzcjqw2g2v9-contravariant-1.5.5' '/nix/store/hxsqnmdg32bmcv3lrca7pc82mgmwk4x1-StateVar-1.2.2' '/nix/store/bk3spn56jjz0nnvhsx347s43b2mn0wgd-these-1.1.1.1' '/nix/store/3bq1dwjjm74p35clqjh8idk0kq2pm9kc-assoc-1.0.2' '/nix/store/y58bkb6lc102b6kwfshlviqa03b89qnx-strict-0.4.0.1' '/nix/store/fgv288v3zvr1kz4y3g58kk7snyixpf0v-text-short-0.1.5' '/nix/store/dj1xxify7fbkc8ba8s61csa27k6q9cmb-time-compat-1.9.6.1' '/nix/store/ksp0nwm8haplyadfqiirr7ncfx3m9cc1-uuid-types-1.0.5' '/nix/store/h343bzrnx3h3smv084fzandb34x6fgwd-witherable-0.4.2' '/nix/store/9y1v1ww3g08fxz8cyyyfsiqxjrp4hxg9-ansi-terminal-0.11.4' '/nix/store/xqczw7kh1ca1milzjmlkif5a25094rw8-colour-2.3.6' '/nix/store/lfvrcgnr6m81c56r14y05nsv2fska0z6-Diff-0.4.1' '/nix/store/gdvlhyam4bmd2yxjaab1gcivkhwvkyxb-ghc-lib-parser-9.2.7.20230228' '/nix/store/74mrdc7fwgw8jgmk8ixn21nxy7lrcjwg-megaparsec-9.2.2' '/nix/store/p9awxs1ifsqhhc6ic2rsriaw02a9v0bk-case-insensitive-1.2.1.0' '/nix/store/82595pw2qq9hvps8fy6yrcqc6sw9mn1z-parser-combinators-1.3.0' '/nix/store/g8w78ddzskb1bd20f9lk2az1lrcv2xyw-MemoTrie-0.6.10' '/nix/store/9vh48x7qzwhmgwk5yxg94r7l2k212bks-newtype-generics-0.6.2' '/nix/store/q537g91rrggqldj0rj9rhkjdg4m7n17q-syb-0.7.2.3' '/nix/store/kw79y0j3vb9bl0ifhv5yafjlid122smj-th-lift-instances-0.1.20' '/nix/store/0bar2j7hc5ri65fbnx5kzaz44cmyd4kg-th-lift-0.8.3' '/nix/store/ajw06lcx1jb5pk9khnrhhd87rpc5r722-yaml-0.11.11.0' '/nix/store/2y5pfs18gxzccp5f0pg382sjzr49cj7s-conduit-1.3.4.3' '/nix/store/n9rpqbq1ad061c5j3air3mdmyrl2r1q3-mono-traversable-1.0.15.3' '/nix/store/qnvvmxjnvq6wfxl3razr5jbp7spa5002-split-0.2.3.5' '/nix/store/jyyx3pvwvkv6r4cvxs8qd6rvgwwdjaw0-vector-algorithms-0.8.0.4' '/nix/store/z214a01ra3sd9r9lfi5y73bgg2xrlkgp-resourcet-1.2.6' '/nix/store/0hxnqyhkhw81vsrzqn8msv558jk56lhh-unliftio-core-0.2.1.0' '/nix/store/0hxnqyhkhw81vsrzqn8msv558jk56lhh-unliftio-core-0.2.1.0' '/nix/store/r1v53b14d4rrf7a60mhb0vm162hkdbbr-libyaml-0.1.2' '/nix/store/qrdwfwhi8n0jkw8hq3c4985vdshk3wf9-file-embed-0.0.15.0' '/nix/store/c61ra5jxx7lkywnx6nd5wr8aq5wjqhnh-gitrev-1.3.1' '/nix/store/j0y70g91ah5sw9nv8fly6b46sdisijmf-optparse-applicative-0.17.0.0' '/nix/store/ly48k373iakg01k3q6xs85cvf58wwf3b-ansi-wl-pprint-0.6.9' '/nix/store/nspwwl1r7rs67acx9acfqi2xln32a9ll-haskell-language-server-1.10.0.0' '/nix/store/4x58016hafv8rq6mppwjcw7klj2gmwkk-aeson-pretty-0.8.9' '/nix/store/y9lk1axxy9f8npx4si7v2jrrwn2hdiwv-cmdargs-0.10.22' '/nix/store/vp1jj5wy92979n0pq2jk7brwri42dp1h-async-2.2.4' '/nix/store/d48mr48ph4i9d4liyxclg4p961bahh5f-base16-bytestring-1.0.2.0' '/nix/store/bqjgbp6j2kz23nlp8j7gzdzcxqqhi45r-cryptohash-sha1-0.11.101.0' '/nix/store/mlcxkbkxba0i2w78gv9ach1mrk0lfsqm-data-default-0.7.1.1' '/nix/store/13na7qp9y2jxzra77wbb8jll9vqxkxls-data-default-class-0.1.2.0' '/nix/store/dcf78iffp2kgpb3lyaxpph2cxcmz38yp-data-default-instances-containers-0.0.1' '/nix/store/0jbckqwai767lh3n16mmg82pw9pb4ahm-data-default-instances-dlist-0.0.1' '/nix/store/f89c1jsay3wq9pd8xmsfsz327l9539n3-data-default-instances-old-locale-0.0.1' '/nix/store/g3ncacsxnz4b0fz1km2v9d65ymf5hrdd-old-locale-1.0.0.7' '/nix/store/g3db7dycgbl1gyp85ih176hbx2agxiis-extra-1.7.12' '/nix/store/fg4rznlbqikrj0qckdjx9d4ymd6hgi3m-clock-0.8.3' '/nix/store/6qar0lw8c0dhmsgmzh86az9zpicbh6fi-ghc-9.2.7' '/nix/store/mw1nwjk1317jrnrgpbb0sdv731kc4iwx-ghcide-1.10.0.0' '/nix/store/2hyijwz4yqjrw68f1jhpj9mzg3cyilj0-co-log-core-0.3.2.0' '/nix/store/pcvcgkq12773y8d1xj77xbjm4rh5i3xx-dependent-map-0.4.0.0' '/nix/store/qfxdkvv2naq7llwkx60vp9i7a39sdb28-constraints-extras-0.3.2.1' '/nix/store/k8anwi3y0bajdkpdxpfwrd118n7r6774-constraints-0.13.4' '/nix/store/zxiamfwnd7q01ca622p86r6mvipz5mgx-type-equality-1' '/nix/store/iqklaqinfvlz8xynyqkdh0py83lzrm6m-dependent-sum-0.7.2.0' '/nix/store/5ainwdvbm3g990glaz64n80bxxaqcz32-some-1.0.4.1' '/nix/store/3khh6a0ylwkjhwgvb2m8jqfr26xfsp90-enummapset-0.6.0.3' '/nix/store/afm72vjszaj7c7zmhrm9q8fr4d6pqdd9-semigroups-0.20' '/nix/store/glai7gq8rw5zn8shai1k2ysgxqx0fcgq-fingertree-0.1.5.0' '/nix/store/mk4rihlxgppz36mms2w2kl89v9fqr4ha-focus-1.0.3' '/nix/store/l5kafpwr9671mpjcm8rfmnsvwn1mrm2a-ghc-check-0.5.0.8' '/nix/store/f5qkpfdidqbbi30jp0ikwpvbjaywwxmn-ghc-paths-0.1.0.12' '/nix/store/9fkwywkq8h63gfd0lk63qi4y00dfl5dd-safe-exceptions-0.1.7.3' '/nix/store/1rs0q200cab6njpyd2zcchqr6raygilg-th-compat-0.1.4' '/nix/store/4r9979ch1k5ijmcshl0c5s9a03mqgai2-ghc-trace-events-0.1.2.6' '/nix/store/nmpvn65azag2zi6xp0dhd9q9m1y9592k-Glob-0.10.2' '/nix/store/cj929mbxgaq135zsgk08z80jq2jr60zb-haddock-library-1.10.0' '/nix/store/20cnjfbackyxn27czjs4lnaf2qpdf3js-hie-bios-0.12.0' '/nix/store/4za9hk8gd1abqayilmd1wg9zqa79ab4c-conduit-extra-1.3.6' '/nix/store/jbv7m5z64m6y8wfa7q5902gf7rkvz1j4-network-3.1.2.8' '/nix/store/dxbpmj0hkaq4vbdgw9gvbpdnkz6swm68-streaming-commons-0.2.2.5' '/nix/store/xrwv94dkmixb7372dxpbbrr64rig2avh-zlib-0.6.3.0' '/nix/store/sp7kvqb96wibzl5sv2cal3s2xn3lrwsi-typed-process-0.2.11.0' '/nix/store/s4dymljd0zi3kwfz8dy4sc8hh5v4r1ik-prettyprinter-1.7.1' '/nix/store/yzdw11i27sv1kiqg64niajrwp8062shb-temporary-1.3' '/nix/store/a1hvwz0xrcgi66zn5xw2rsvwfj5chx5s-unix-compat-0.5.4' '/nix/store/26dv6lhxf8i9dd2q5xlr5c13dcpm01w8-hie-compat-0.3.1.0' '/nix/store/mvi0dbg41dswqh0nfzy4iyhgcpg0icg0-hiedb-0.4.3.0' '/nix/store/15hq3djr8hn72hgr19kdb3p78j27nlg0-algebraic-graphs-0.6.1' '/nix/store/sw7dk9m8yi9w247bgy4m855qxy3qi5an-lucid-2.11.1' '/nix/store/vw7rizycn8vxw92ci3yswjb5qw851q13-blaze-builder-0.4.2.2' '/nix/store/dwddpsl4sbq36w3zv80d760diabim0k6-mmorph-1.2.0' '/nix/store/zywhfmsm0rh4y1spdk8rb5m3a5b9gcf7-sqlite-simple-0.4.18.2' '/nix/store/jq9qgha7grj0w5rpp1zyqhchj5s7csy1-blaze-textual-0.2.3.1' '/nix/store/zpv627f4p0pagjfkx8h8mjg5cqm0faw0-direct-sqlite-2.3.28' '/nix/store/926p6zd0kybs7sbph0yrwkdrvj02hh68-Only-0.1' '/nix/store/r50mzh21ll9vrgx143cwmgd154m0z5pr-terminal-size-0.3.4' '/nix/store/95l4x459kxg5g1118zi34sn8hadad0mi-hls-graph-1.9.0.0' '/nix/store/mraprhrxspy2fqhnxr7i0p3syp9fg878-js-dgtable-0.5.2' '/nix/store/z9shf7hqd5v2gfn57db6736i3xw0r6a2-js-flot-0.8.3' '/nix/store/r930ybcgd9dmfilcxnnj6bkwrs0nnj7f-js-jquery-3.3.1' '/nix/store/i82wc6ygiivp3cw69namjrf3p8l9v47y-list-t-1.0.5.6' '/nix/store/497s5bw8zvb07fh300rri8hg29lqx2l5-foldl-1.4.14' '/nix/store/206anqlwa1ca0yi55ja1l068mqjcn112-profunctors-5.6.2' '/nix/store/2vjpnhslcqfi6iamzczwg0shy4mxa0x6-logict-0.8.0.0' '/nix/store/4whgg3w32s1xi00fnv5n10gki6zrpix1-monad-control-1.0.3.1' '/nix/store/yls7zplaafy5nlq3q4mvp52nwskq760b-transformers-base-0.4.6' '/nix/store/yls7zplaafy5nlq3q4mvp52nwskq760b-transformers-base-0.4.6' '/nix/store/fr1m7n6za80ivz6c61ckvjrd5dmdrjh3-stm-containers-1.2.0.2' '/nix/store/i7vrcvkwrajhpczf7xxxa2p1jcglqz9z-deferred-folds-0.9.18.3' '/nix/store/mx2f7rvdiv4yklyxn98v61dbr6m7sc9q-stm-hamt-1.2.0.10' '/nix/store/apcpj2p19338hzw581gq5a60jwis83fs-primitive-extras-0.10.1.6' '/nix/store/898mnk9asbng183v0m07lxcnzivki053-cereal-0.5.8.3' '/nix/store/4mlnx1drjl74hl1ahdajj7hhg5qc7ifh-primitive-unlifted-0.1.3.1' '/nix/store/dvg5iwfnf5pallkbfvlq5cgz8y8ckvd7-unliftio-0.2.24.0' '/nix/store/ljyaq5cc2r79ya2w0a2crbk9nsdhb0mc-hls-plugin-api-1.6.0.0' '/nix/store/hjicrl2bd2y9vs172wwaq5z16va2cg3z-hw-fingertree-0.1.2.1' '/nix/store/lqkvdj32vgs3asw904ryb788lmi7jmab-hw-prim-0.6.3.2' '/nix/store/rl9xzwlxd50vlhqd3qn5g8ny4bswvgpi-mmap-0.5.9' '/nix/store/8hy48jhigsi5w42mwhhflvlh27npifs6-lens-5.1.1' '/nix/store/hri9srl6jvkfcf4yj3yyv7h27v66ahn4-call-stack-0.4.0' '/nix/store/z5ag9h08nwgli4vcr90hjaz7lay00w7p-free-5.1.10' '/nix/store/lavj0b7q9fbhmnz9116r8xpy61ixmxl8-kan-extensions-5.2.5' '/nix/store/bfa05d2lfl4pr441m8wya6i1kj7gm8ms-adjunctions-4.4.2' '/nix/store/iyy2i0n65yz1vqj799l93zw7l22xgsld-void-0.7.3' '/nix/store/1gi8yy51hmh6cxp2720yh0dki22hn4gq-invariant-0.6.1' '/nix/store/9nsnb1y7jgvsjdifr1gvqzhk9rf9h76h-parallel-3.2.2.0' '/nix/store/j2mhd2wh0sybpdwb39brn7l9a1rqvhbm-reflection-2.1.7' '/nix/store/yxj2r2k28yhchjicnyvafxlqw642zbim-lens-aeson-1.2.2' '/nix/store/jcmbib3a0rbl1m4qr2wcmbgzyljgqm54-lsp-1.6.0.0' '/nix/store/csx91air3wgbdv8blk4i89y39bj49w2g-lsp-types-1.6.0.0' '/nix/store/257r88kd2q6p47wmhdx2xffvdx4mvd9h-mod-0.1.2.2' '/nix/store/ymf6nl0drl385cl1klk3xnp9q3566hh3-semirings-0.6' '/nix/store/660xwx84ab72dxcwsqfjg5ln1aafhy3s-network-uri-2.6.4.2' '/nix/store/s1fzfzzv7gngq3ss0kv8cd6hm4pjnbdv-safe-0.3.19' '/nix/store/z2kjrcqpvh8iw3lman3mfrkb38asrl9q-sorted-list-0.2.1.0' '/nix/store/c8cfjkv2i0qnrl8f07d6kibzl80k9isi-text-rope-0.2' '/nix/store/x25xk5qrb2nb88sb96piarvh2693qsjy-uuid-1.3.15' '/nix/store/ra90wsw4n0x0h4p1rrn8aqv011pc72h3-cryptohash-md5-0.11.101.0' '/nix/store/lymzcrqpdi6cpak3xjkkvy0way9gxh7v-entropy-0.4.1.10' '/nix/store/mqpqyp6z3r2qwy8fw2jnj0baj8x9vcdp-network-info-0.2.1' '/nix/store/abcprfcrlk2896p6mcd6i7yvlkd1pd34-opentelemetry-0.8.0' '/nix/store/3cmbnav62svw5sqinagrp2kf9mzhch1m-regex-tdfa-1.3.2' '/nix/store/qxs4fliwvpic94b7k9lcd4scbpifav16-regex-base-0.94.0.2' '/nix/store/aphr74x364f8fznyb3877sdd0n6nswam-implicit-hie-0.1.2.7' '/nix/store/l64lqd5hj81lmrjrqda0swf4imw67r9n-filepattern-0.1.3' '/nix/store/l64lqd5hj81lmrjrqda0swf4imw67r9n-filepattern-0.1.3' '/nix/store/f5a3923kdbj9xgqlff8ci17ch3wn5jxi-implicit-hie-cradle-0.5.0.1' '/nix/store/9vcm16qamw3v69cbmxzsidn85bbv3xml-prettyprinter-ansi-terminal-1.1.3' '/nix/store/cwhrcv1mg01isq1gnlarv6s5dbc8ivby-githash-0.1.6.3' '/nix/store/nvssp9a111zvqqpp4sq6rn8m9w8g57w3-hls-alternate-number-format-plugin-1.3.0.1' '/nix/store/x4d4xg1s699fw8jlgq939r38lbiq4qs7-hls-cabal-fmt-plugin-0.1.0.0' '/nix/store/qx9jpz619n02x0mcwyra7qjjngp81awk-hls-cabal-plugin-0.1.0.0' '/nix/store/f6lcpc1kr9s46nw9iwzbk07xys4hjpg2-hls-call-hierarchy-plugin-1.2.0.0' '/nix/store/dnll76jg9lpalc4jp7v0fq3690wiqpbx-hls-change-type-signature-plugin-1.1.0.1' '/nix/store/nlpl45qk21074z92wvf480jfz5mqqnn5-hls-class-plugin-1.1.1.1' '/nix/store/1py2hgmx1ix45qwlhrbqbz6sbsldgif9-ghc-exactprint-1.5.0' '/nix/store/qlq648qg29c25j8fhnzr79lnj2nxvahp-fail-4.9.0.0' '/nix/store/kb6qixvallh6f0zhx727cdfi0x7k8xym-ordered-containers-0.2.3' '/nix/store/m1krfdvd5h6f48583pr0raln8ccn8rz5-hls-code-range-plugin-1.1.0.0' '/nix/store/5dc5xfxp4iafk21zp9m4ffd42s2mfdfi-hls-eval-plugin-1.5.0.0' '/nix/store/g3iqr99mdxx0da0xm88dzjzbv7wxwzyk-pretty-simple-4.1.2.0' '/nix/store/73437p8v2a4c4y9h1brgxnw4jga9mhkc-hls-explicit-fixity-plugin-1.1.0.0' '/nix/store/g8m8wbdpxwps817lfznj7asaw9bv4fc5-hls-explicit-imports-plugin-1.2.1.0' '/nix/store/nbp2nwsdjdn09swimlps5zp4ld8m7a5g-hls-explicit-record-fields-plugin-1.0.1.0' '/nix/store/vfyqapr6cs2cfzy3cn6azkndzkgywzx9-hls-floskell-plugin-1.0.2.0' '/nix/store/dldligcgvikrz4m3vijvzmkg7r7z53cn-floskell-0.10.7' '/nix/store/ilp4wgyq17nzmsjb6gf47hfbziv31h4r-haskell-src-exts-1.23.1' '/nix/store/dkmpl6iph6r72msp6flk5zn0n54qs7mj-monad-dijkstra-0.1.1.3' '/nix/store/gnwbpqkjgxq2yc6vvpb6hqjgfzjw2bjj-psqueues-0.2.7.3' '/nix/store/4s4j1s77i5840lvb4678wawrc1r1d6p4-utf8-string-1.0.2' '/nix/store/syhj5kc50isv6kcv2wj1zjwm81ymz7r5-hls-fourmolu-plugin-1.1.1.0' '/nix/store/cmwa8c9bbf3aija4b4hr2q475q2qzmpn-fourmolu-0.9.0.0' '/nix/store/992jgp6i24ffnv7a9ih6vrxnjw7ahfsl-process-extras-0.7.4' '/nix/store/3z9h1y6h4jfh44gnqzmfv6hps8y5nazk-generic-deriving-1.14.3' '/nix/store/fqmkgzjbc01922wpyi88s82rh88bkanc-ListLike-4.7.8' '/nix/store/zv5sk0krdwvb3vh3nl8w3c5av7f4cdal-fmlist-0.9.4' '/nix/store/9yb573m6afs33j0jm9icswhf60mnka1i-hls-gadt-plugin-1.0.2.0' '/nix/store/ycv31hzi1mqvmz19d7n3zv0imba2ijgz-hls-refactor-plugin-1.2.0.0' '/nix/store/0c84dpaaipiagswc4gy047c39c6rk40r-retrie-1.2.2' '/nix/store/iq9x5mpqinama7s64z80xlyhr0a2xcy5-random-shuffle-0.0.4' '/nix/store/clvirc1lqc0r6f5jmn53wxl659qrcxwh-MonadRandom-0.5.3' '/nix/store/c0103bnpx0cwl48dpn6qnm7vb76a5nj6-hls-hlint-plugin-1.1.2.0' '/nix/store/l4s1dkx57wlb7w5cnf623wag2f50zp8m-apply-refact-0.11.0.0' '/nix/store/6vfwngr04wi3w9znsr5bbipzpq09b671-filemanip-0.3.6.3' '/nix/store/rlsfbyn0sc6pbjbqlzjv0hkrg1khifhg-refact-0.3.0.2' '/nix/store/02glxya9bw0lvhgspiz3r07xmdvivv0z-uniplate-1.6.13' '/nix/store/02glxya9bw0lvhgspiz3r07xmdvivv0z-uniplate-1.6.13' '/nix/store/671n43rkrs8fmwd18cihignxzmrkk1n2-ghc-lib-parser-ex-9.2.0.4' '/nix/store/956azca84xrdg8fwmly5n9m2g55mb3hs-hlint-3.4.1' '/nix/store/5iqly9ds4vdgpxz7nqhpys91vh642qga-cpphs-1.20.9.1' '/nix/store/cvf1r3nmjn0swq8mkqy8nw8l6b8zwh51-polyparse-1.13' '/nix/store/cvf1r3nmjn0swq8mkqy8nw8l6b8zwh51-polyparse-1.13' '/nix/store/0pjcp4hl2l6fyb22ipmhwrrsjasc292a-deriving-aeson-0.2.9' '/nix/store/labcmmi09g1769rpiiwcim6k4rmc2p5d-hscolour-1.24.4' '/nix/store/6ai4gdil89v06dxwav9cm077w5kjklp3-hslogger-1.3.1.0' '/nix/store/67nmzmsn61bzbp957h0c1wyqbhvdc2sr-network-bsd-2.8.1.0' '/nix/store/x71zrym9i0160ffbwwd81dgza9arjvcl-hls-module-name-plugin-1.1.1.0' '/nix/store/dyh1gs29y3h85kb8js0nd22fz03i7z0r-hls-ormolu-plugin-1.0.4.0' '/nix/store/gbhzazfsqv0jhpjxmcm1ygmvqfi9jcmz-ormolu-0.5.0.1' '/nix/store/1ww92x8wj0rcm04j2had4cjz0731vgma-ormolu-0.5.0.1-bin' '/nix/store/zhhryb154a9dhdarm6igpj4042ji69vk-hls-pragmas-plugin-1.0.4.0' '/nix/store/qnfqs48fiwrwq7gkkyyss3lh8w1npsha-fuzzy-0.1.0.1' '/nix/store/8gcqa5finsg5alk5dwwiz3l0pyaqni6w-monoid-subclasses-1.1.3' '/nix/store/34cvc4j5xjq1687jdxbyac58xvkrwr1x-primes-0.2.1.0' '/nix/store/4mv9n8wzbqi9mb0cljzm258cfx7l8ms3-hls-qualify-imported-names-plugin-1.0.2.0' '/nix/store/xhis580fgl8mwzqjn8gls7l36ysim7h9-hls-refine-imports-plugin-1.0.5.0' '/nix/store/7vd156mdrf6npm1b9p4c9nlk8ss0bnnd-hls-rename-plugin-1.0.2.0' '/nix/store/fisv6g74461cvl2hhfsrppvw7ds2aj7z-hls-retrie-plugin-1.0.4.0' '/nix/store/a2qlb5bnpvrwzm6i15nxcl5w12rvs23f-hls-splice-plugin-1.1.0.0' '/nix/store/ja1pwyzy3akp9k2vky9biqgxpj48mkbd-hls-stylish-haskell-plugin-1.0.1.2' '/nix/store/p9vgkrng4n3m0gd43r0nva9bn10jg9ad-stylish-haskell-0.14.3.0' '/nix/store/4ymj3l94kkasp83awfpm3mqhsh7j356y-HsYAML-0.2.1.1' '/nix/store/dc1va72fmij6dljpgp8h22k2jx77a22r-HsYAML-aeson-0.2.0.1' '/nix/store/dc1va72fmij6dljpgp8h22k2jx77a22r-HsYAML-aeson-0.2.0.1' '/nix/store/68w9q08kyqz92yhi706qic3igkwscqyl-optparse-simple-0.1.1.4' '/nix/store/68w9q08kyqz92yhi706qic3igkwscqyl-optparse-simple-0.1.1.4' '/nix/store/c7fdd6cjs0zj6w3sssv7srs2anw58j6s-update-autotools-gnu-config-scripts-hook' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/bxsly8a56yb8kyrq03s82a3vyc8fqrb3-multiple-outputs.sh' '/nix/store/nf1lkdrhapsx5lr6diyxyjr7pb7r20gr-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh' '/nix/store/d275wzmimzi3xp4j3vbkvxscmc79q088-strip.sh' '/nix/store/cy78am69kj3d2r286rd7wg0cv48gqa3z-clang-wrapper-11.1.0' '/nix/store/v3ks390idh1xqnh3r0zlkqc86pcy7lva-cctools-binutils-darwin-wrapper-973.0.1' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=('/nix/store/ay0icgbhay57540wh6yy12sh5ngwgzy9-ncurses-6.4' '/nix/store/xc88ky1w798ncij3jr12gqcv2w9njyy2-libffi-3.4.4' '/nix/store/s8ddra36d0p31gxbg5qfahdnd0hy58ca-gmp-with-cxx-6.2.1' '/nix/store/lpv1rr58zr5xa2q60s1x4792pgb6w7fr-libiconv-50' '/nix/store/ay0icgbhay57540wh6yy12sh5ngwgzy9-ncurses-6.4' '/nix/store/1wamlhkl3q15b7pdim85vqkmz053fwlg-libcxx-11.1.0-dev' '/nix/store/y56hqp2dgrh9hi9xyd88n0pcl6gn895d-libcxx-11.1.0' '/nix/store/21knak232h33cha4a16k6gzgai23c0ss-libcxxabi-11.1.0-dev' '/nix/store/gs6iqzg3cswfsxwnwcvsnf6fn76wpbr2-libcxxabi-11.1.0' '/nix/store/h2hd63vq9js32ggqx9nvhsjqx4b2ckss-compiler-rt-libc-11.1.0-dev' '/nix/store/81jnzlpii91vz9y8rwb7g095zk2jj2qr-compiler-rt-libc-11.1.0' )
declare -a pkgsHostTarget=('/nix/store/21fn46279sjpqqqqsy2cnkxr3rqzbwq6-apple-framework-CoreFoundation-11.0.0' '/nix/store/3pd5fbv4did9ya9mjbcj25rfmdk021sm-libobjc-11.0.0' )
declare -a pkgsTargetTarget=()
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preferLocalBuild='1'
export preferLocalBuild
prefix='/Users/christophethibaut/Coding/haskell-change/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
role_post=''
shell='/nix/store/ka6rabx4lz7m3habrjhh8hvbgxbz8r98-bash-5.2-p15/bin/bash'
export shell
shellHook=''
export shellHook
stdenv='/nix/store/5pq0sy4haiy4rb2chya6qq72w95ci2dp-stdenv-darwin'
export stdenv
strictDeps=''
export strictDeps
stripAllFlags=' '
system='aarch64-darwin'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_accumFlagsArray ()
{
 
    local name;
    if [ -n "$__structuredAttrs" ]; then
        for name in "$@";
        do
            local -n nameref="$name";
            flagsArray+=(${nameref+"${nameref[@]}"});
        done;
    else
        for name in "$@";
        do
            local -n nameref="$name";
            case "$name" in 
                *Array)
                    flagsArray+=(${nameref+"${nameref[@]}"})
                ;;
                *)
                    flagsArray+=(${nameref-})
                ;;
            esac;
        done;
    fi
}
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
        if [ -n "${NIX_LIB64_IN_SELF_RPATH:-}" ]; then
            export NIX_LDFLAGS="-rpath $1/lib64 ${NIX_LDFLAGS-}";
        fi;
        if [ -n "${NIX_LIB32_IN_SELF_RPATH:-}" ]; then
            export NIX_LDFLAGS="-rpath $1/lib32 ${NIX_LDFLAGS-}";
        fi;
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    for varName in $(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }');
    do
        if (( "${NIX_DEBUG:-0}" >= 1 )); then
            printf "@%s@ -> %q\n" "${varName}" "${!varName}";
        fi;
        args+=("--subst-var" "$varName");
    done
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -pr --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                xz -d < "$fn" | tar xf - --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "$shareDocName" ]; then
        local confScript="$configureScript";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget=check;
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget=test;
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray+=("${checkFlags[@]:-VERBOSE=y}");
        else
            flagsArray+=(${checkFlags:-VERBOSE=y});
        fi;
        _accumFlagsArray checkFlagsArray;
        flagsArray+=(${checkTarget});
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        _accumFlagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    _accumFlagsArray distFlags distFlagsArray;
    flagsArray+=(${distTarget:-dist});
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars" || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'$search_path'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
            continue;
        fi;
        if [[ -n $NIX_LOG_FD ]]; then
            echo "@nix { \"action\": \"setPhase\", \"phase\": \"$curPhase\" }" >&"$NIX_LOG_FD";
        fi;
        showPhaseHeader "$curPhase";
        dumpVars;
        local startTime=$(date +"%s");
        eval "${!curPhase:-$curPhase}";
        local endTime=$(date +"%s");
        showPhaseFooter "$curPhase" "$startTime" "$endTime";
        if [ "$curPhase" = unpackPhase ]; then
            [ -z "${sourceRoot}" ] || chmod +x "${sourceRoot}";
            cd "${sourceRoot:-.}";
        fi;
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "libiconv-50: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_@wrapperName@_TARGET_BUILD_@suffixSalt@=1
        ;;
        0)
            export NIX_@wrapperName@_TARGET_HOST_@suffixSalt@=1
        ;;
        1)
            export NIX_@wrapperName@_TARGET_TARGET_@suffixSalt@=1
        ;;
        *)
            echo "libiconv-50: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
            _accumFlagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray;
            flagsArray+=(${installCheckTarget:-installcheck});
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
    _accumFlagsArray makeFlags makeFlagsArray installFlags installFlagsArray;
    if [ -n "$__structuredAttrs" ]; then
        flagsArray+=("${installTargets[@]:-install}");
    else
        flagsArray+=(${installTargets:-install});
    fi;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    if [ -n "$__structuredAttrs" ]; then
        patchesArray=(${patches:+"${patches[@]}"});
    else
        patchesArray=(${patches:-});
    fi;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray=("${patchFlags[@]:--p1}");
        else
            flagsArray=(${patchFlags:--p1});
        fi;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    if [[ "$1" == "--host" ]]; then
        pathName=HOST_PATH;
        shift;
    else
        if [[ "$1" == "--build" ]]; then
            pathName=PATH;
            shift;
        fi;
    fi;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f";
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "$pathName" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" command -v "env" || true)";
                args="-S $(PATH="${!pathName}" command -v "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" command -v "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" command -v "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    case "$phase" in 
        unpackPhase)
            echo "unpacking sources"
        ;;
        patchPhase)
            echo "patching sources"
        ;;
        configurePhase)
            echo "configuring"
        ;;
        buildPhase)
            echo "building"
        ;;
        checkPhase)
            echo "running tests"
        ;;
        installPhase)
            echo "installing"
        ;;
        fixupPhase)
            echo "post-installation fixup"
        ;;
        installCheckPhase)
            echo "running install tests"
        ;;
        *)
            echo "$phase"
        ;;
    esac
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local pathsNew=;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        find $paths -type f -a '!' -wholename "$prefix/lib/debug/*" -exec $cmd $stripFlags '{}' \; 2> /dev/null;
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        case "$1" in 
            --replace)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        echo "substituteStream(): WARNING: pattern '$pattern' doesn't match anything in $description" 1>&2;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream(): ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream(): ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream(): ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    if [ -n "$__structuredAttrs" ]; then
        srcsArray=("${srcs[@]}");
    else
        srcsArray=($srcs);
    fi;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/z5xxcns3wkj9dbikarch3za5sybz5d65-gnu-config-2021-01-25/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH:$nix_saved_PATH"
XDG_DATA_DIRS="$XDG_DATA_DIRS:$nix_saved_XDG_DATA_DIRS"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
